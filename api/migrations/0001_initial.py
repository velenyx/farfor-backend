# Generated by Django 4.2.2 on 2023-06-23 12:01

import api.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('city', models.CharField(default='Липецк', max_length=255, verbose_name='Город')),
                ('street', models.CharField(max_length=255, verbose_name='Улица')),
                ('house', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Дом')),
                ('apartment', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Квартира')),
                ('porch', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Подъезд')),
                ('floor', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Этаж')),
                ('intercom', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Домофон')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Комментарий')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адресы',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=70, verbose_name='Оглавление')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('slug', models.SlugField(default='', unique=True)),
                ('image', models.ImageField(upload_to='banners/images/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
            },
        ),
        migrations.CreateModel(
            name='Bucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
            ],
            options={
                'verbose_name': 'Корзина',
                'verbose_name_plural': 'Корзины',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('slug', models.SlugField(unique=True)),
                ('image', models.ImageField(upload_to='categories/images/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Категория',
                'verbose_name_plural': 'Категории',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Component',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Компонент',
                'verbose_name_plural': 'Компоненты',
            },
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Условие',
                'verbose_name_plural': 'Условия',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, unique=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Delivery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('method', models.CharField(max_length=255, verbose_name='Метод')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='api.address', verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Доставка',
                'verbose_name_plural': 'Доставки',
            },
        ),
        migrations.CreateModel(
            name='DeliveryKind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(default=0.0, verbose_name='Цена')),
                ('message', models.CharField(max_length=255, verbose_name='Сообщение')),
                ('status', models.CharField(default='FREE_DELIVERY', max_length=255, verbose_name='Статус доставки')),
            ],
            options={
                'verbose_name': 'Разновидность доставки',
                'verbose_name_plural': 'Разновидности доставки',
            },
        ),
        migrations.CreateModel(
            name='KPFC',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calories', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Калории')),
                ('proteins', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Белки')),
                ('fats', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Жиры')),
                ('carbohydrates', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Углероды')),
            ],
            options={
                'verbose_name': 'КБЖУ',
                'verbose_name_plural': 'КБЖУ',
            },
        ),
        migrations.CreateModel(
            name='Modification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('mode', models.CharField(blank=True, null=True, verbose_name='Мод')),
                ('amount', models.IntegerField(blank=True, null=True, verbose_name='Количество')),
                ('price', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Цена')),
                ('weight', models.IntegerField(validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$')], verbose_name='Вес')),
            ],
            options={
                'verbose_name': 'Модификация',
                'verbose_name_plural': 'Модификации',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('name', models.CharField(max_length=70, verbose_name='Название')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание')),
                ('discount', models.IntegerField(blank=True, null=True, validators=[django.core.validators.RegexValidator(message='Число должно быть положительным', regex='^[0-9.]+$'), api.validators.validate_less_hundred], verbose_name='Скидка')),
                ('image', models.ImageField(blank=True, upload_to='products/images/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Товар',
                'verbose_name_plural': 'Товары',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название')),
                ('title', models.CharField(max_length=255, verbose_name='Загаловок')),
                ('description', models.TextField(verbose_name='Описание')),
                ('slug', models.SlugField(default='', unique=True)),
                ('hex_color', models.CharField(blank=True, max_length=16, null=True, validators=[django.core.validators.RegexValidator(message='Неправильный формат цвета', regex='^#[a-zA-Z0-9]+$')], verbose_name='Цвет акции')),
                ('start_date', models.DateField(blank=True, null=True, verbose_name='Дата начала акции')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='Дата конца акции')),
                ('image', models.ImageField(upload_to='promotions/images/', verbose_name='Картинка')),
            ],
            options={
                'verbose_name': 'Акция',
                'verbose_name_plural': 'Акции',
            },
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='Название')),
                ('slug', models.SlugField(default='', unique=True)),
                ('icon', models.FileField(blank=True, null=True, upload_to='properties/images/', verbose_name='Иконка')),
            ],
            options={
                'verbose_name': 'Свойство',
                'verbose_name_plural': 'Свойства',
            },
        ),
        migrations.CreateModel(
            name='PromotionCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='api.condition')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='api.promotion')),
            ],
            options={
                'verbose_name': 'Акция - условие',
                'verbose_name_plural': 'Акции - условия',
            },
        ),
        migrations.AddField(
            model_name='promotion',
            name='condition',
            field=models.ManyToManyField(through='api.PromotionCondition', to='api.condition'),
        ),
        migrations.CreateModel(
            name='ProductProperty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='api.product', verbose_name='Товар')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.property', verbose_name='Свойство')),
            ],
            options={
                'verbose_name': 'Продукт - Свойство',
                'verbose_name_plural': 'Продукты - Свойства',
            },
        ),
        migrations.CreateModel(
            name='ProductModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modification', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.modification', verbose_name='Модификации')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modifications', to='api.product')),
            ],
            options={
                'verbose_name': 'Модификация - товар',
                'verbose_name_plural': 'Модификации - товары',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.category', verbose_name='Категория')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='api.product')),
            ],
            options={
                'verbose_name': 'Товар - Категория',
                'verbose_name_plural': 'Товары - Категории',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ManyToManyField(through='api.ProductCategory', to='api.category', verbose_name='Категория'),
        ),
        migrations.AddField(
            model_name='product',
            name='component',
            field=models.ManyToManyField(related_name='components', through='api.Component', to='api.modification', verbose_name='Компоненты'),
        ),
        migrations.AddField(
            model_name='product',
            name='kpfc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.kpfc'),
        ),
        migrations.AddField(
            model_name='product',
            name='modification',
            field=models.ManyToManyField(related_name='products', through='api.ProductModification', to='api.modification', verbose_name='Модификации'),
        ),
        migrations.AddField(
            model_name='product',
            name='promotion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='api.promotion'),
        ),
        migrations.AddField(
            model_name='product',
            name='property',
            field=models.ManyToManyField(through='api.ProductProperty', to='api.property'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('bucket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.bucket', verbose_name='Корзина')),
                ('delivery', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='api.delivery', verbose_name='Доставка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Заказчик')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
            },
        ),
        migrations.AddField(
            model_name='delivery',
            name='delivery_kind',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='api.deliverykind', verbose_name='Разновидность'),
        ),
        migrations.AddField(
            model_name='delivery',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to=settings.AUTH_USER_MODEL, verbose_name='Заказчик'),
        ),
        migrations.AddField(
            model_name='component',
            name='modification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.modification', verbose_name='Компоненты'),
        ),
        migrations.AddField(
            model_name='component',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='api.product', verbose_name='Товар'),
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=70, verbose_name='Название')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cities', to='api.country', verbose_name='Страна')),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='CategoryBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('banner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='api.banner')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='banners', to='api.category')),
            ],
            options={
                'verbose_name': 'Категория - Баннер',
                'verbose_name_plural': 'Категории - Баннеры',
            },
        ),
        migrations.AddField(
            model_name='category',
            name='banner',
            field=models.ManyToManyField(through='api.CategoryBanner', to='api.banner', verbose_name='Баннер'),
        ),
        migrations.CreateModel(
            name='BucketProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(verbose_name='Количество')),
                ('bucket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='api.bucket', verbose_name='Корзина')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buckets', to='api.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'Корзина - Товар',
                'verbose_name_plural': 'Корзины - Товары',
            },
        ),
        migrations.AddField(
            model_name='bucket',
            name='product',
            field=models.ManyToManyField(through='api.BucketProduct', to='api.product'),
        ),
        migrations.AddField(
            model_name='bucket',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buckets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddConstraint(
            model_name='productproperty',
            constraint=models.UniqueConstraint(fields=('product', 'property'), name='unique_product_property'),
        ),
        migrations.AddConstraint(
            model_name='component',
            constraint=models.UniqueConstraint(fields=('product', 'modification'), name='unique_component'),
        ),
        migrations.AddConstraint(
            model_name='city',
            constraint=models.UniqueConstraint(fields=('name', 'country'), name='unique_location'),
        ),
    ]
